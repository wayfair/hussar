#!/bin/bash

set -o nounset
set -o errexit
set -o errtrace
set -o pipefail
#set -o xtrace

readonly HUSSAR_DIR="${HUSSAR_DIR:-$(dirname $(readlink -f "$0") | sed 's:/bin::')}"
readonly PROJECT_DIR="${PROJECT_DIR=$(pwd -P)}"
readonly TMP_DIR=$(mktemp -d /tmp/hhvm-XXX)

readonly PATH='/bin:/usr/bin'

source "${HUSSAR_DIR}/lib/utility"
source "${HUSSAR_DIR}/config" || fail 'Missing config file. See readme.'

declare -A OPTIONS=([debug]= [force]= [print-report]= [revision]= [update]=)
declare -A LINES_ADDED

function usage () {
   echo "
Usage: $0 [ -d ] [ -f ] [ -h ] [ -r ] [ -u ]
   -d  Enable debugging messages.
   -f  Force: replace any existing report.
   -h  Display this usage text and exit.
   -p  Print report upon completion.
   -r  Assume revision (commit hash) as HEAD.
   -u  Update latest report symlink.
"
   finish
}

function main () {
   unless_option 'force' 'check_report'
   analyze
   make_report
   if_option 'update' 'update_symlink'
}

function parse_options () {
   while getopts ':dfhpr:u' opt; do
      case "${opt}" in
         'd') set_option 'debug' ;;
         'f') set_option 'force' ;;
         'h') usage ;;
         'p') set_option 'print-report' ;;
         'r') set_option 'revision' "${OPTARG}" ;;
         'u') set_option 'update' ;;
      esac
   done

   unless_option 'revision' \
      set_option 'revision' \
         $(git_commit_hash)

   debug $(declare -p OPTIONS)
}

function check_report () {
   if [[ -f "${HUSSAR_DIR}/reports/${OPTIONS['revision']}" ]]; then
      echo "Report already exists for ${OPTIONS['revision']}."
      echo
      if_option 'print-report' \
         cat "${HUSSAR_DIR}/reports/${OPTIONS['revision']}"
      finish
   fi
}

function analyze () {
   build_full_file_list > "${TMP_DIR}/input-list"

   SECONDS=0

   # Nota bene: The analyze flag is not present in hhvm > 3.3.x. There does not
   # seem to be equivalent functionality provided in later versions.

   # Add --log=4 for all debugging messages
   "${HHVM}" --hphp -t analyze --config-value ParserThreadCount=1 \
      --input-list "${TMP_DIR}/input-list"                        \
      --output-dir "${TMP_DIR}"                                   \
         &> /dev/null

   debug "analysis took $(minsec ${SECONDS})"
}

function make_report () {
   debug 'create report.raw'

   # CodeError.js contains the static analysis errors discovered by hhvm in json
   # format. This php script parses those results and prints just the relevant
   # data as four columns: line, rule, file, data. Forgive the UUOC.
   cat "${TMP_DIR}/CodeError.js" \
      | php -d memory_limit=512M -r '
         $json = json_decode(file_get_contents("php://stdin"), true);
         foreach ($json[1] as $rule => $violations) {
            foreach ($violations as $violation) {
               list($file, $line) = $violation["c1"];
               $data = str_replace("\n", "", $violation["d"]);

               # Exclude errors in systemlib.php files
               if (strpos($file, "systemlib.php") !== false) {
                  continue;
               }

               # Exclude any specified rules
               if ("'"${REPORT_EXCLUDE_RULES[@]}"'" &&
                   preg_match('\''/('$(tr ' ' '|' <<< "${REPORT_EXCLUDE_RULES[@]}")')/'\'', $rule) === 1) {
                  continue;
               }

               # Exclude anything matching exclude regex
               if ("'"${REPORT_EXCLUDE_REGEX}"'" &&
                   preg_match('\''/'"${REPORT_EXCLUDE_REGEX}"'/'\'', "$line $rule $file $data") === 1) {
                  continue;
               }

               printf("%s %s %s %s\n", $line, $rule, $file, $data);
            }
         }' > "${TMP_DIR}/report.raw"

   debug 'create report'

   # from patch-files
   if [[ -f "${PROJECT_DIR}/.lines-added" ]]; then
      source "${PROJECT_DIR}/.lines-added"
   fi

   {
      echo "# commit:  ${OPTIONS['revision']}"
      echo "# created: $(date '+%Y-%m-%d %H:%M:%S')"
      echo
   } > "${TMP_DIR}/report"

   {
      cat "${TMP_DIR}/report.raw" \
         | while read -r line; do
            line=${line//${PROJECT_DIR}\//}
            line=${line//${PROJECT_DIR}/}
            read -r line_number rule file data <<< "${line}"
            if (( line_number > "${LINES_ADDED[${file}]-0}" )); then
               (( line_number -= "${LINES_ADDED[${file}]-0}" ))
            fi
            echo "${line_number} ${rule} ${file} ${data}"
           done
   } | sort -k3,3 -k1,1n -k2,2 \
     >> "${TMP_DIR}/report"

   mv "${TMP_DIR}/report" "${HUSSAR_DIR}/reports/${OPTIONS['revision']}"

   if_option 'print-report' \
      cat "${HUSSAR_DIR}/reports/${OPTIONS['revision']}"
}

function update_symlink () {
   ln -sf "${HUSSAR_DIR}/reports/${OPTIONS['revision']}" "${HUSSAR_DIR}/reports/latest"
}

function fin () {
   find "${TMP_DIR}" -delete
   find /tmp -maxdepth 1 -type f -name 'perf*' -user "${USER}" -delete
}

trap fin EXIT

cd "${PROJECT_DIR}"
parse_options "$@"
main
